"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = require("path");
const os_1 = require("os");
const fs_extra_1 = __importDefault(require("fs-extra"));
const clear_module_1 = __importDefault(require("clear-module"));
class Filesystem {
    constructor(basePath = path_1.join(os_1.tmpdir(), `${new Date().getTime()}`)) {
        this.basePath = basePath;
        this._modules = new Set();
        this.fsExtra = fs_extra_1.default;
    }
    _isModule(filePath) {
        return ['.js', '.ts', '.json'].includes(path_1.extname(filePath));
    }
    _makePath(filePath) {
        return path_1.isAbsolute(filePath) ? filePath : path_1.join(this.basePath, filePath);
    }
    _dropExt(filePath) {
        return filePath.replace(/\.\w+$/, '');
    }
    _removeFromModule(filePath) {
        const absPath = this._makePath(filePath);
        this._modules.delete(absPath);
        try {
            clear_module_1.default(absPath);
        }
        catch (error) { }
    }
    _addToModule(filePath) {
        if (!this._isModule(filePath)) {
            return;
        }
        this._modules.add(this._makePath(filePath));
    }
    async add(filePath, contents) {
        const absPath = this._makePath(filePath);
        await this.fsExtra.outputFile(absPath, contents);
        this._addToModule(filePath);
    }
    async ensureRoot() {
        return this.fsExtra.ensureDir(this.basePath);
    }
    async get(filePath) {
        return this.fsExtra.readFile(this._makePath(filePath), 'utf-8');
    }
    async remove(filePath) {
        const absPath = this._makePath(filePath);
        await this.fsExtra.remove(absPath);
        const withoutExt = this._dropExt(absPath);
        if (this._modules.has(absPath) || this._modules.has(withoutExt)) {
            this._removeFromModule(filePath);
            this._removeFromModule(withoutExt);
            return;
        }
    }
    async cleanup() {
        await this.fsExtra.remove(this.basePath);
        this._modules.forEach((mod) => {
            this._removeFromModule(mod);
            this._removeFromModule(this._dropExt(mod));
        });
    }
}
exports.Filesystem = Filesystem;
