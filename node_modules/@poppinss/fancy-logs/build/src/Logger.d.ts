import { ActionsList, MessageNode } from './contracts';
export declare class Logger {
    private _baseOptions?;
    actions: ActionsList;
    private _colors;
    private _biggestLabel;
    logs: string[];
    constructor(_baseOptions?: (Partial<MessageNode> & {
        fake?: boolean | undefined;
    }) | undefined);
    private _configure;
    private _computeBiggestLabel;
    private _normalizeMessage;
    private _getWhitespace;
    private _getIcon;
    private _getLabel;
    private _getPrefix;
    private _getSuffix;
    private _formatStack;
    log(name: keyof ActionsList, messageNode: string | Error | MessageNode, ...args: string[]): string | undefined;
    success(message: string | MessageNode, ...args: string[]): string | undefined;
    error(message: string | Error | MessageNode, ...args: string[]): string | undefined;
    fatal(message: string | Error | MessageNode, ...args: string[]): string | undefined;
    info(message: string | MessageNode, ...args: string[]): string | undefined;
    complete(message: string | MessageNode, ...args: string[]): string | undefined;
    pending(message: string | MessageNode, ...args: string[]): string | undefined;
    create(message: string | MessageNode, ...args: string[]): string | undefined;
    update(message: string | MessageNode, ...args: string[]): string | undefined;
    delete(message: string | MessageNode, ...args: string[]): string | undefined;
    watch(message: string | MessageNode, ...args: string[]): string | undefined;
    start(message: string | MessageNode, ...args: string[]): string | undefined;
    stop(message: string | MessageNode, ...args: string[]): string | undefined;
    compile(message: string | MessageNode, ...args: string[]): string | undefined;
    skip(message: string | MessageNode, ...args: string[]): string | undefined;
}
