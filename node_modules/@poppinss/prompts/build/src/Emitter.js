"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Base_1 = require("./Base");
class EmitterPrompt extends Base_1.Prompt {
    $prompt(options) {
        return new Promise((resolve, reject) => {
            const self = this;
            options = Object.assign({ name: 'prompt' }, options, {
                async accept() {
                    return this.answer(true);
                },
                async decline() {
                    return this.answer(false);
                },
                async select(index) {
                    if (!Array.isArray(this.choices)) {
                        reject(new Error('[prompt select]: method can only be used with choices'));
                        return;
                    }
                    if (this.choices.length <= index) {
                        reject(new Error(`[prompt select]: out of bounds index ${index}`));
                        return;
                    }
                    const answer = this.choices[index].name;
                    return this.answer(this.type === 'multiselect' ? [answer] : answer);
                },
                async multiSelect(indexes) {
                    if (this.type !== 'multiselect') {
                        reject(new Error('[prompt multiselect]: method can only be with multiple choices prompt'));
                        return;
                    }
                    const maxIndex = Math.max(...indexes);
                    if (this.choices.length <= maxIndex) {
                        reject(new Error(`[prompt multiselect]: out of bounds index ${maxIndex}`));
                        return;
                    }
                    return this.answer(indexes.map((index) => this.choices[index].name));
                },
                async answer(answer) {
                    if (typeof (this.format) === 'function') {
                        answer = this.format(answer);
                    }
                    let passes = true;
                    if (typeof (this.validate) === 'function') {
                        const state = {
                            value: answer,
                            type: this.type,
                            name: this.name,
                            message: this.message,
                            choices: this.choices,
                            initial: this.initial,
                            format: this.format,
                            submitted: true,
                            cancelled: false,
                        };
                        if (state.choices) {
                            state.size = state.choices.size;
                            state.multiple = state.type === 'multiselect';
                        }
                        passes = await this.validate(answer, state);
                    }
                    if (passes === true) {
                        answer = typeof (this.result) === 'function' ? await this.result(answer) : answer;
                        self.emit('prompt:answer', answer);
                        resolve(answer);
                    }
                    else {
                        self.emit('prompt:error', passes === false ? 'Enter the value' : passes);
                        resolve(answer);
                    }
                },
            });
            this.emit('prompt', options);
        });
    }
}
exports.EmitterPrompt = EmitterPrompt;
