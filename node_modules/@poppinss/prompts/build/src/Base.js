"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const events_1 = __importDefault(require("events"));
class Prompt extends events_1.default {
    on(event, callback) {
        super.on(event, callback);
        return this;
    }
    async ask(title, options) {
        options = options || {};
        return this.$prompt({
            type: 'input',
            name: options.name,
            message: title,
            initial: options.default,
            result: options.result,
            format: options.format,
            validate: options.validate,
        });
    }
    async secure(title, options) {
        options = options || {};
        return this.$prompt({
            type: 'password',
            message: title,
            name: options.name,
            initial: options.default,
            result: options.result,
            format: options.format,
            validate: options.validate,
        });
    }
    async confirm(title, options) {
        options = options || {};
        return this.$prompt({
            type: 'confirm',
            message: title,
            name: options.name,
            initial: options.default,
            result: options.result,
            format: options.format,
            validate: options.validate,
        });
    }
    async toggle(title, choices, options) {
        options = options || {};
        return this.$prompt({
            type: 'toggle',
            message: title,
            name: options.name,
            enabled: choices[0],
            disabled: choices[1],
            initial: options.default,
            result: options.result,
            format: options.format,
            validate: options.validate,
        });
    }
    async choice(title, choices, options) {
        options = options || {};
        return this.$prompt({
            type: 'select',
            message: title,
            name: options.name,
            choices: choices.map((choice) => {
                if (typeof (choice) === 'string') {
                    return { name: choice, message: choice, value: choice };
                }
                return choice;
            }),
            initial: options.default,
            result: options.result,
            format: options.format,
            validate: options.validate,
        });
    }
    async multiple(title, choices, options) {
        options = options || {};
        return this.$prompt({
            type: 'multiselect',
            message: title,
            name: options.name,
            choices: choices.map((choice) => {
                if (typeof (choice) === 'string') {
                    return { name: choice, message: choice, value: choice };
                }
                return choice;
            }),
            initial: options.default,
            result: options.result,
            format: options.format,
            validate: options.validate,
        });
    }
}
exports.Prompt = Prompt;
