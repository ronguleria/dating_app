/// <reference types="node" />
import Emitter from 'events';
import { PromptContract, TextPromptOptions, BooleanPromptOptions, TogglePromptOptions, ChoicePromptOptions, PromptEventOptions, PromptChoice, MultiplePromptOptions } from './Contracts';
export declare abstract class Prompt extends Emitter implements PromptContract {
    protected abstract $prompt(options: any): Promise<any>;
    on(event: 'prompt', callback: (options: PromptEventOptions) => any): this;
    on(event: 'prompt:error', callback: (message: string) => any): this;
    on(event: 'prompt:answer', callback: (message: any) => any): this;
    ask<Result extends any = string>(title: string, options?: TextPromptOptions): Promise<Result>;
    secure<Result extends any = string>(title: string, options?: TextPromptOptions): Promise<Result>;
    confirm<Result extends any = boolean>(title: string, options?: BooleanPromptOptions): Promise<Result>;
    toggle<Result extends any = boolean>(title: string, choices: [string, string], options?: TogglePromptOptions): Promise<Result>;
    choice<Result extends any = string>(title: string, choices: (string | PromptChoice)[], options?: ChoicePromptOptions): Promise<Result>;
    multiple<Result extends any = string[]>(title: string, choices: (string | PromptChoice)[], options?: MultiplePromptOptions): Promise<Result>;
}
