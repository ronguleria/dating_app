export declare type PromptState<T extends any> = {
    type: string;
    name: string;
    message: string;
    value: T;
};
export declare type PromptValidationFunction<T extends PromptState<any>> = (value: T['value'], state: T) => boolean | string | Promise<boolean | string>;
export declare type PromptFormatFunction<T extends any> = (value: T) => T | Promise<T>;
export declare type PromptResultFunction<T extends any> = (value: T) => any | Promise<any>;
export declare type TextPromptOptions = {
    default?: string;
    name?: string;
    result?: PromptResultFunction<string>;
    format?: PromptFormatFunction<string>;
    validate?: PromptValidationFunction<PromptState<string>>;
};
export declare type ChoicePromptOptions = {
    default?: string;
    name?: string;
    result?: PromptResultFunction<string>;
    format?: PromptFormatFunction<string>;
    validate?: PromptValidationFunction<PromptState<string> & {
        choices: PromptChoice[];
    }>;
};
export declare type MultiplePromptOptions = {
    default?: string[];
    name?: string;
    result?: PromptResultFunction<string[]>;
    format?: PromptFormatFunction<string[]>;
    validate?: PromptValidationFunction<PromptState<string[]> & {
        choices: PromptChoice[];
    }>;
};
export declare type BooleanPromptOptions = {
    default?: boolean;
    name?: string;
    result?: PromptResultFunction<boolean>;
    format?: PromptFormatFunction<boolean>;
    validate?: PromptValidationFunction<PromptState<boolean>>;
};
export declare type TogglePromptOptions = {
    default?: boolean;
    name?: string;
    result?: PromptResultFunction<boolean>;
    format?: PromptFormatFunction<boolean>;
    validate?: PromptValidationFunction<PromptState<boolean>>;
};
export declare type PromptEventOptions = {
    name: string;
    type: string;
    message: string;
    initial?: string | boolean | string[];
    result?: PromptResultFunction<any>;
    format?: PromptFormatFunction<any>;
    validate?: PromptValidationFunction<any>;
    answer(answer: any): Promise<void>;
    accept(): Promise<void>;
    decline(): Promise<void>;
    select(index: number): Promise<void>;
    multiSelect(indexes: number[]): Promise<void>;
};
export declare type PromptChoice = {
    name: string;
    message?: string;
    hint?: string;
    disabled?: boolean;
};
export interface PromptContract {
    ask<Result extends any = string>(title: string, options?: TextPromptOptions): Promise<Result>;
    secure<Result extends any = string>(title: string, options?: TextPromptOptions): Promise<Result>;
    confirm<Result extends any = boolean>(title: string, options?: BooleanPromptOptions): Promise<Result>;
    toggle<Result extends any = boolean>(title: string, choices: [string, string], options?: TogglePromptOptions): Promise<Result>;
    choice<Result extends any = string>(title: string, choices: (string | PromptChoice)[], options?: ChoicePromptOptions): Promise<Result>;
    multiple<Result extends any = string[]>(title: string, choices: (string | PromptChoice)[], options?: MultiplePromptOptions): Promise<Result>;
    on(event: 'prompt', callback: (options: PromptEventOptions) => any): this;
    on(event: 'prompt:error', callback: (message: string) => any): this;
    on(event: 'prompt:answer', callback: (message: any) => any): this;
    on(event: string, callback: (...args: any[]) => any): this;
}
