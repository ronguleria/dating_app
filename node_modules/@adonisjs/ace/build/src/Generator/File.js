"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = require("path");
const smpltmpl_1 = require("smpltmpl");
const StringTransformer_1 = require("./StringTransformer");
class GeneratorFile {
    constructor(_name, _options = {}) {
        this._name = _name;
        this._options = _options;
        this._templateContents = {};
    }
    _getFileRelativePath(filepath) {
        if (this._appRoot) {
            return filepath.replace(`${this._appRoot}${path_1.sep}`, '');
        }
        return filepath;
    }
    stub(fileOrContents, options) {
        this._stub = fileOrContents;
        this._isStubRaw = !!(options && options.raw);
        return this;
    }
    destinationDir(directory) {
        this._destinationDir = directory;
        return this;
    }
    appRoot(directory) {
        this._appRoot = directory;
        return this;
    }
    apply(contents) {
        this._templateContents = contents;
        return this;
    }
    toJSON() {
        const extension = this._options.extname || '.ts';
        const filename = new StringTransformer_1.StringTransformer(path_1.basename(this._name))
            .dropExtension()
            .cleanSuffix(this._options.suffix)
            .changeForm(this._options.form)
            .addSuffix(this._options.suffix)
            .changeCase(this._options.pattern || 'pascalcase')
            .toValue();
        const initialFilePath = this._name.replace(path_1.basename(this._name), filename);
        const filepath = path_1.isAbsolute(this._destinationDir)
            ? path_1.join(this._destinationDir, initialFilePath)
            : (this._appRoot
                ? path_1.join(this._appRoot, this._destinationDir, initialFilePath)
                : path_1.join(this._destinationDir, initialFilePath));
        const templateContents = Object.assign({
            extension,
            filename,
        }, this._templateContents);
        const contents = this._stub
            ? (this._isStubRaw
                ? smpltmpl_1.template(this._stub, templateContents)
                : smpltmpl_1.templateFromFile(this._stub, templateContents))
            : '';
        return {
            filename,
            filepath: `${filepath}${extension}`,
            relativepath: this._getFileRelativePath(`${filepath}${extension}`),
            extension,
            contents,
        };
    }
}
exports.GeneratorFile = GeneratorFile;
