"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = require("path");
const pluralize_1 = __importDefault(require("pluralize"));
const snake_case_1 = __importDefault(require("snake-case"));
const camel_case_1 = __importDefault(require("camel-case"));
const pascal_case_1 = __importDefault(require("pascal-case"));
class StringTransformer {
    constructor(_input) {
        this._input = _input;
    }
    cleanSuffix(suffix) {
        if (!suffix) {
            return this;
        }
        this._input = this._input.replace(new RegExp(`[-_]?${suffix}$`, 'i'), '');
        return this;
    }
    addSuffix(suffix) {
        if (!suffix) {
            return this;
        }
        this._input = `${this._input}_${suffix}`;
        return this;
    }
    changeForm(form) {
        if (!form) {
            return this;
        }
        this._input = pluralize_1.default[form](this._input);
        return this;
    }
    changeCase(pattern) {
        switch (pattern) {
            case 'camelcase':
                this._input = camel_case_1.default(this._input);
                return this;
            case 'pascalcase':
                this._input = pascal_case_1.default(this._input);
                return this;
            case 'snakecase':
                this._input = snake_case_1.default(this._input);
                return this;
            default:
                return this;
        }
    }
    dropExtension() {
        this._input = this._input.replace(new RegExp(`${path_1.extname(this._input)}$`), '');
        return this;
    }
    toValue() {
        return this._input;
    }
}
exports.StringTransformer = StringTransformer;
