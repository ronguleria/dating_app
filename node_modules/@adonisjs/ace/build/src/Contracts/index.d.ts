import { Kleur } from 'kleur';
import { ParsedOptions } from 'getopts';
import { PromptContract } from '@poppinss/prompts';
import { Logger } from '@poppinss/fancy-logs';
export declare type FlagTypes = 'string' | 'number' | 'boolean' | 'array' | 'numArray';
export declare type ArgTypes = 'string' | 'spread';
export declare type CommandArg = {
    propertyName: string;
    name: string;
    type: ArgTypes;
    required: boolean;
    description?: string;
};
export declare type CommandFlag = {
    propertyName: string;
    name: string;
    type: FlagTypes;
    description?: string;
    alias?: string;
    default?: any;
};
export declare type GlobalFlagHandler = (value: any, parsed: ParsedOptions, command?: CommandConstructorContract) => void;
export declare type CommandsGroup = {
    group: string;
    commands: SerializedCommandContract[];
}[];
export interface SerializedCommandContract {
    args: CommandArg[];
    settings: any;
    flags: CommandFlag[];
    commandName: string;
    description: string;
}
export interface CommandConstructorContract extends SerializedCommandContract {
    new (...args: any[]): CommandContract;
    booted: boolean;
    boot(): void;
}
export declare type GeneratorFileOptions = {
    pattern?: 'pascalcase' | 'camelcase' | 'snakecase';
    form?: 'singular' | 'plural';
    suffix?: string;
    extname?: string;
};
export interface GeneratorFileContract {
    stub(fileOrContents: string, options?: {
        raw: boolean;
    }): this;
    destinationDir(directory: string): this;
    appRoot(directory: string): this;
    apply(contents: any): this;
    toJSON(): {
        filename: string;
        filepath: string;
        extension: string;
        contents: string;
        relativepath: string;
    };
}
export interface GeneratorContract {
    addFile(name: string, options?: GeneratorFileOptions): GeneratorFileContract;
    run(): Promise<void>;
    clear(): void;
}
export interface CommandContract {
    parsed?: ParsedOptions;
    logger: Logger;
    prompt: PromptContract;
    colors: Kleur;
    generator: GeneratorContract;
    handle(...args: any[]): Promise<void>;
}
export declare type ManifestCommand = SerializedCommandContract & {
    commandPath: string;
};
export declare type ManifestNode = {
    [command: string]: ManifestCommand;
};
export declare type FindHookCallback = (command: SerializedCommandContract | null) => Promise<void> | void;
export declare type RunHookCallback = (command: CommandContract) => Promise<void> | void;
