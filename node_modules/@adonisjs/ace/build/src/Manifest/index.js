"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = require("fs");
const utils_1 = require("@poppinss/utils");
const path_1 = require("path");
const validateCommand_1 = require("../utils/validateCommand");
const CommandValidationException_1 = require("../Exceptions/CommandValidationException");
class Manifest {
    constructor(_appRoot) {
        this._appRoot = _appRoot;
    }
    _writeManifest(manifest) {
        return new Promise((resolve, reject) => {
            fs_1.writeFile(path_1.join(this._appRoot, 'ace-manifest.json'), JSON.stringify(manifest), (error) => {
                if (error) {
                    reject(error);
                }
                else {
                    resolve();
                }
            });
        });
    }
    loadCommand(commandPath) {
        const absPath = path_1.isAbsolute(commandPath) ? commandPath : path_1.join(this._appRoot, commandPath);
        const command = utils_1.esmRequire(absPath);
        if (!command.name) {
            throw CommandValidationException_1.CommandValidationException.invalidManifestExport(commandPath);
        }
        command.boot();
        return command;
    }
    async generate(commandPaths) {
        const manifest = commandPaths.reduce((manifest, commandPath) => {
            const command = this.loadCommand(commandPath);
            validateCommand_1.validateCommand(command);
            command.boot();
            manifest[command.commandName] = {
                settings: command.settings || {},
                commandPath: commandPath.replace(new RegExp(`${path_1.extname(commandPath)}$`), ''),
                commandName: command.commandName,
                description: command.description,
                args: command.args,
                flags: command.flags,
            };
            return manifest;
        }, {});
        await this._writeManifest(manifest);
    }
    load() {
        return new Promise((resolve, reject) => {
            fs_1.readFile(path_1.join(this._appRoot, 'ace-manifest.json'), 'utf-8', (error, contents) => {
                if (error) {
                    reject(error);
                }
                else {
                    resolve(JSON.parse(contents));
                }
            });
        });
    }
}
exports.Manifest = Manifest;
